---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
let { slug } = Astro.params;
import { parse } from "csv/sync";
import * as jsdom from "jsdom";
export async function getStaticPaths() {
  let pageDataArr = [];
  async function thisFn(driveId, catagory) {
    let folder = await fetch(
      "https://drive.google.com/drive/folders/" + driveId
    );
    let folder_data = await folder.text();
    const folder_doc = new jsdom.JSDOM(folder_data).window.document;
    let links = folder_doc.querySelectorAll("[data-id]");
    let lins_arr = [...links];
    //if there is a aria-label="Google Drive Folder" in it, it is a folder
    let folders = lins_arr.filter((link) =>
      link.querySelector("[aria-label='Google Drive Folder']")
    );
    let docs = lins_arr.filter(
      (link) =>
        //not folders
        !link.querySelector("[aria-label='Google Drive Folder']")
    );
    for (let i = 0; i < folders.length; i++) {
      await thisFn(
        folders[i].getAttribute("data-id"),
        folders[i].querySelector("[data-tooltip]")?.textContent
      );
    }
    for (let i = 0; i < docs.length; i++) {
      if (docs[i].getAttribute("data-id") == "_gd") continue;
      pageDataArr.push({
        id: docs[i].getAttribute("data-id"),
        uri:
          "https://docs.google.com/document/d/" +
          docs[i].getAttribute("data-id"),
        type: docs[i].getAttribute("data-target"),
        name: docs[i].querySelector("[data-list-item-target] div[jsname]")
          ?.textContent,
        slug: docs[i]
          .querySelector("[data-list-item-target] div[jsname]")
          ?.textContent.replace(/[^a-zA-Z0-9]+/g, "-")
          .toLowerCase(),
        catagory: catagory,
        hidden: "FALSE",
      });
    }
  }

  return await thisFn(
    "1oTTXkMehSivsM1MM4vmqL3u6XRgIpLai",
    "Senate Uncatagorized Pages"
  ).then(async () => {
    let data_sheets = await fetch(
      "https://docs.google.com/spreadsheets/d/1iO9LJBg739viwl7r_Pscbw9jrAl9U3k48KL6nFfNQ2M/export?format=csv"
    );

    let data = await data_sheets.text();
    //csv to json
    let drive_doc_ids = parse(data);
    drive_doc_ids = drive_doc_ids.map((doc: string[]) => {
      return {
        name: doc[0],
        slug: doc[1],
        uri: doc[3],
        category: doc[4],
        hidden: doc[5],
      };
    });
    //merge the two arrays
    drive_doc_ids = [...drive_doc_ids, ...pageDataArr];

    let pages: any = [];
    for (let i = 1; i < drive_doc_ids.length; i++) {
      let data_doc = await fetch(`${drive_doc_ids[i].uri}/export`);
      // console.log("fetching", drive_doc_ids[i].uri);

      let data2 = await data_doc.text();
      let page_info = {
        params: { slug: drive_doc_ids[i].slug },
        props: {
          title: drive_doc_ids[i].name,
          content: data2,
          hidden: drive_doc_ids[i].hidden,
        },
      };
      pages.push(page_info);
    }

    return pages;
  });
}
const { content, title, date, hidden } = Astro.props;
---

<StarlightPage
  frontmatter={{
    title: title,
    tableOfContents: false,
    template: hidden === "TRUE" || slug == "office-hours" ? "splash" : "doc",
    head: [
      {
        tag: "style",
        content: `
          ${
            hidden === "TRUE"
              ? `
      h1#_top{
      display: none;
      }
      .content-panel {
      border-top:unset!important;
      }
      .sl-container {
  margin: 0 auto !important;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  /* padding: 0 20em; */
  max-width: 90% !important;
      }
      `
              : ""
          }
        `,
      },
    ],
  }}
>
  <article class="[&_*]:dark:!text-gray-300" set:html={content} />
</StarlightPage>

<style>
  @media (prefers-color-scheme: dark) {
    #_top {
      color: #e2e8f0 !important;
    }
  }
</style>
